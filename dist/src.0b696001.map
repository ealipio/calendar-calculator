{"version":3,"sources":["..\\src\\dom-utility.js","..\\src\\date-utility.js","..\\src\\calendar-utility.js","..\\src\\index.js"],"names":["getValue","Id","document","querySelector","value","mountInDOM","children","parent","forEach","appendChild","child","createDOMElements","names","map","createElement","name","resetElement","element","firstChild","removeChild","buildStartDate","date","split","parseInt","i","month","day","year","getAllowedMonths","nextDate","Array","from","keys","n","slice","getMonth","calculateMonthRange","daysAmount","myDate","Date","setDate","getDate","buildDays","week","td","textContent","before","classList","add","after","weekend","buildWeeks","weeks","tr","days","buildHead","weekDays","join","months","getFirstSunday","firstDate","offset","getDay","result","getLastSaturday","lastDate","getWeekInMonth","iterator","results","firstSunday","lastSaturday","push","daysInYear","leap","dayOfYear","userDate","start","getFullYear","diff","getTimezoneOffset","Math","floor","isValid","settings","doy","startDate","remainingDays","buildCalendar","canvas","buildMonths","allowedMonths","table","thead","tbody","innerHTML","calendar","generateCalendar","startDateValue","startUp","addEventListener"],"mappings":"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","file":"src.0b696001.map","sourceRoot":"..\\public","sourcesContent":["export const getValue = (Id) => {\r\n  return document.querySelector(Id).value\r\n}\r\n\r\nexport const mountInDOM = (children, parent) => {\r\n  children.forEach(child => parent.appendChild(child))\r\n}\r\n\r\nexport const createDOMElements = (names) => {\r\n  return names.map(name => document.createElement(name))\r\n}\r\n\r\nexport const resetElement = (element) => {\r\n  while (element.firstChild) element.removeChild(element.firstChild)\r\n}\r\n","import { mountInDOM, createDOMElements } from './dom-utility'\r\n\r\nexport const buildStartDate = (date) => {\r\n  let [month = 8, day = 1, year = 2018] = date.split('/').map(i => parseInt(i))\r\n  return {\r\n    month: --month,\r\n    day,\r\n    year\r\n  }\r\n}\r\n\r\nexport const getAllowedMonths = (month, nextDate) => {\r\n  const monthsInYear = 12\r\n  return Array.from(Array(monthsInYear).keys(), n => ++n).slice(month - 1, nextDate.getMonth())\r\n}\r\n\r\nexport const calculateMonthRange = (year, month, day, daysAmount) => {\r\n  const myDate = new Date(year, month, day)\r\n  const nextDate = new Date(year, month, day)\r\n  nextDate.setDate(nextDate.getDate() + parseInt(daysAmount) - 1)\r\n  return {myDate, nextDate}\r\n}\r\n\r\nconst buildDays = (week) => {\r\n  return week.map(day => {\r\n    const [td] = createDOMElements(['td'])\r\n    td.textContent = day.date.getDate()\r\n    day.before && td.classList.add('before')\r\n    day.after && td.classList.add('after')\r\n    day.weekend && td.classList.add('weekend')\r\n    return td\r\n  })\r\n}\r\n\r\nexport const buildWeeks = (weeks) => {\r\n  return weeks.map(week => {\r\n    const [tr] = createDOMElements(['tr'])\r\n    const days = buildDays(week)\r\n    mountInDOM(days, tr)\r\n    return tr\r\n  })\r\n}\r\n\r\nexport const buildHead = ({month, year}) => {\r\n  const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\r\n  const weekDays = Array.from('SMTWTFS').join('</td><td>')\r\n  return `<tr><td>${weekDays}</td></tr><tr><td colspan=\"7\">${months[month]} ${year}</td></tr>`\r\n}\r\n\r\nexport const getFirstSunday = (firstDate) => {\r\n  var offset = firstDate.getDay()\r\n\r\n  var result = new Date(firstDate)\r\n  result.setDate(firstDate.getDate() - offset)\r\n\r\n  return result\r\n}\r\n\r\nexport const getLastSaturday = (lastDate) => {\r\n  var offset = 6 - lastDate.getDay()\r\n\r\n  var result = new Date(lastDate)\r\n  result.setDate(lastDate.getDate() + offset)\r\n\r\n  return result\r\n}\r\n\r\nexport const getWeekInMonth = (year, month, myDate, nextDate) => {\r\n  let results = []\r\n\r\n  // find out first and last days of the month\r\n  const firstDate = new Date(year, month, 1)\r\n  const lastDate = new Date(year, month + 1, 0)\r\n\r\n  // calculate first sunday and last saturday\r\n  var firstSunday = getFirstSunday(firstDate)\r\n  var lastSaturday = getLastSaturday(lastDate)\r\n\r\n  // iterate days starting from first sunday\r\n  let iterator = new Date(firstSunday)\r\n  let i = 0\r\n  let week\r\n\r\n  // ..until last saturday\r\n  while (iterator <= lastSaturday) {\r\n    if (i++ % 7 === 0) {\r\n      // start new week when sunday\r\n      week = []\r\n      results.push(week)\r\n    }\r\n    // push day to week\r\n    week.push({\r\n      date: new Date(iterator),\r\n      before: iterator < myDate,\r\n      after: iterator > nextDate,\r\n      weekend: (iterator.getDay() === 0 || iterator.getDay() === 6) && ((iterator < firstDate) || (iterator < lastDate))\r\n    })\r\n    iterator.setDate(iterator.getDate() + 1)\r\n  }\r\n\r\n  return results\r\n}\r\n\r\nexport const daysInYear = (year) => {\r\n  const leap = !(year % 4) || (!(year % 100) && !(year % 400))\r\n  return leap ? 366 : 365\r\n}\r\n\r\nexport const dayOfYear = (userDate) => {\r\n  const date = new Date(userDate.year, userDate.month, userDate.day)\r\n  var start = new Date(date.getFullYear(), 0, 0)\r\n  var diff = (date - start) + ((start.getTimezoneOffset() - date.getTimezoneOffset()) * 60 * 1000)\r\n  var oneDay = 1000 * 60 * 60 * 24\r\n  return Math.floor(diff / oneDay)\r\n}\r\n\r\nexport const isValid = (settings) => {\r\n  const doy = dayOfYear(settings.startDate)\r\n  const diy = daysInYear(settings.startDate.year)\r\n  const remainingDays = diy - doy\r\n  return ((remainingDays - settings.daysAmount) >= -1)\r\n}\r\n","import { mountInDOM, createDOMElements, resetElement } from './dom-utility'\r\nimport {\r\n  getAllowedMonths,\r\n  getWeekInMonth,\r\n  calculateMonthRange,\r\n  buildHead,\r\n  buildWeeks,\r\n  isValid} from './date-utility'\r\n\r\nexport const buildCalendar = (settings) => {\r\n  const canvas = document.querySelector('#calendar-canvas')\r\n  if (isValid(settings)) {\r\n    resetElement(canvas)\r\n    const months = buildMonths(settings)\r\n    mountInDOM(months, canvas)\r\n  } else {\r\n    alert('Multi Year is not implemented yet')\r\n  }\r\n}\r\n\r\nconst buildMonths = ({startDate, daysAmount}) => {\r\n  const {year, month, day} = startDate\r\n  const {myDate, nextDate} = calculateMonthRange(year, month, day, daysAmount)\r\n  const allowedMonths = getAllowedMonths(month, nextDate)\r\n  return allowedMonths.map(month => {\r\n    const [table, thead, tbody] = createDOMElements(['table', 'thead', 'tbody'])\r\n    thead.innerHTML = buildHead({ month, year })\r\n    // get weeks for a given month\r\n    const calendar = getWeekInMonth(year, month, myDate, nextDate)\r\n    const weeks = buildWeeks(calendar)\r\n    mountInDOM(weeks, tbody)\r\n    mountInDOM([tbody], table)\r\n    mountInDOM([thead], table)\r\n    return table\r\n  })\r\n}\r\n","import {\r\n  getValue\r\n} from './dom-utility'\r\n\r\nimport {\r\n  buildStartDate\r\n} from './date-utility'\r\n\r\nimport {\r\n  buildCalendar\r\n} from './calendar-utility'\r\n\r\nconst generateCalendar = () => {\r\n  const startDateValue = getValue('#start-date')\r\n  const daysAmount = parseInt(getValue('#days-amount'))\r\n  const startDate = buildStartDate(startDateValue)\r\n  buildCalendar({startDate, daysAmount})\r\n}\r\n\r\nconst startUp = () => {\r\n  document.querySelector('#generate-calendar')\r\n    .addEventListener('click', generateCalendar)\r\n}\r\n\r\ndocument.addEventListener('DOMContentLoaded', startUp)\r\n"]}